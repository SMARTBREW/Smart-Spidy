import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  Search, 
  Filter, 
  Eye, 
  Database,
  Brain,
  TrendingUp,
  Star,
  Tag,
  Calendar,
  User,
  MessageSquare,
  BarChart3,
  RefreshCw,
  Clock
} from 'lucide-react';
import { TrainingData, AdminStats } from '../../types';

interface TrainingDataTableProps {
  stats: AdminStats | null;
  isLoading: boolean;
}

export const TrainingDataTable: React.FC<TrainingDataTableProps> = ({ stats }) => {
  const [trainingData, setTrainingData] = useState<TrainingData[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [feedbackFilter, setFeedbackFilter] = useState<'all' | 'chat' | 'auto'>('all');
  const [qualityFilter, setQualityFilter] = useState<'all' | 'high' | 'medium' | 'low'>('all');
  const [selectedItem, setSelectedItem] = useState<TrainingData | null>(null);

  useEffect(() => {
    // TODO: Fetch training data from API
    const fetchTrainingData = async () => {
      try {
        // Placeholder data for now
        setTrainingData([]);
      } catch (error) {
        console.error('Error fetching training data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchTrainingData();
  }, []);

  const filteredData = trainingData.filter(item => {
    const matchesSearch = item.userQuestion.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         item.assistantAnswer.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         item.category?.toLowerCase().includes(searchTerm.toLowerCase());
    let matchesFeedback = true;
    if (feedbackFilter === 'chat') {
      matchesFeedback = item.feedback === 'Thumbs Up';
    } else if (feedbackFilter === 'auto') {
      matchesFeedback = item.feedback === 'Thumbs Down';
    }
    return matchesSearch && matchesFeedback;
  });

  const totalTrainingData = trainingData.length;
  const autoGenerated = trainingData.filter(d => d.source === 'auto').length;
  // Removed highQuality and avgQuality calculations

  const StatCard: React.FC<{ 
    title: string; 
    value: number | string; 
    icon: React.ElementType; 
    color: string;
    bgColor: string;
    trend?: string;
  }> = ({ title, value, icon: Icon, color, bgColor, trend }) => (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className={`${bgColor} p-6 rounded-xl shadow-sm border border-gray-100`}
    >
      <div className="flex items-center justify-between">
        <div>
          <p className="text-gray-600 text-sm font-medium">{title}</p>
          <p className="text-3xl font-bold text-gray-900 mt-2">
            {typeof value === 'number' ? value.toLocaleString() : value}
          </p>
          {trend && (
            <p className="text-green-600 text-sm font-medium mt-2 flex items-center">
              <TrendingUp className="w-4 h-4 mr-1" />
              {trend}
            </p>
          )}
        </div>
        <div className={`p-3 rounded-lg bg-white/50 ${color}`}>
          <Icon className="w-7 h-7" />
        </div>
      </div>
    </motion.div>
  );

  const SourceBadge: React.FC<{ source: string }> = ({ source }) => {
    const sourceConfig = {
      chat: { bg: 'bg-blue-100', text: 'text-blue-800', border: 'border-blue-200', icon: MessageSquare },
      auto: { bg: 'bg-green-100', text: 'text-green-800', border: 'border-green-200', icon: RefreshCw },
      imported: { bg: 'bg-purple-100', text: 'text-purple-800', border: 'border-purple-200', icon: Database },
      manual: { bg: 'bg-orange-100', text: 'text-orange-800', border: 'border-orange-200', icon: User }
    };

    const config = sourceConfig[source as keyof typeof sourceConfig];
    if (!config) return <span className="text-gray-400 text-sm">Unknown</span>;

    const IconComponent = config.icon;

    return (
      <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium border ${config.bg} ${config.text} ${config.border}`}>
        <IconComponent className="w-3 h-3 mr-1.5" />
        {source.charAt(0).toUpperCase() + source.slice(1)}
      </span>
    );
  };

  const QualityBadge: React.FC<{ score: number }> = ({ score }) => {
    const getQualityConfig = (score: number) => {
      if (score >= 0.8) return { bg: 'bg-green-100', text: 'text-green-800', border: 'border-green-200', label: 'High' };
      if (score >= 0.5) return { bg: 'bg-yellow-100', text: 'text-yellow-800', border: 'border-yellow-200', label: 'Medium' };
      return { bg: 'bg-red-100', text: 'text-red-800', border: 'border-red-200', label: 'Low' };
    };

    const config = getQualityConfig(score);

    return (
      <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium border ${config.bg} ${config.text} ${config.border}`}>
        <Star className="w-3 h-3 mr-1.5" />
        {config.label} ({score.toFixed(2)})
      </span>
    );
  };

  const DifficultyBadge: React.FC<{ level: string | null }> = ({ level }) => {
    if (!level) return <span className="text-gray-400 text-sm">-</span>;

    const difficultyConfig = {
      beginner: { bg: 'bg-green-100', text: 'text-green-800', border: 'border-green-200' },
      intermediate: { bg: 'bg-yellow-100', text: 'text-yellow-800', border: 'border-yellow-200' },
      advanced: { bg: 'bg-red-100', text: 'text-red-800', border: 'border-red-200' }
    };

    const config = difficultyConfig[level as keyof typeof difficultyConfig];
    if (!config) return <span className="text-gray-400 text-sm">Unknown</span>;

    return (
      <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium border ${config.bg} ${config.text} ${config.border}`}>
        {level.charAt(0).toUpperCase() + level.slice(1)}
      </span>
    );
  };

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          {[...Array(4)].map((_, i) => (
            <div key={i} className="bg-white p-6 rounded-xl shadow-sm border border-gray-100 animate-pulse">
              <div className="h-4 bg-gray-200 rounded w-3/4 mb-3"></div>
              <div className="h-8 bg-gray-200 rounded w-1/2"></div>
            </div>
          ))}
        </div>
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="animate-pulse space-y-4">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="h-16 bg-gray-200 rounded-lg"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Analytics Header */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <StatCard
          title="Total Training Data"
          value={totalTrainingData}
          icon={Database}
          color="text-indigo-600"
          bgColor="bg-gradient-to-br from-indigo-50 to-indigo-100"
        />
        <StatCard
          title="Auto Generated"
          value={autoGenerated}
          icon={RefreshCw}
          color="text-blue-600"
          bgColor="bg-gradient-to-br from-blue-50 to-blue-100"
        />
      </div>

      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Training Data</h1>
          <p className="text-gray-600 mt-2">Self-improving AI training data from user interactions</p>
        </div>
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2 text-sm text-gray-500">
            <Brain className="w-4 h-4 text-green-500" />
            <span>Self-Learning Loop Active</span>
          </div>
          <div className="flex items-center space-x-2 text-sm text-gray-500">
            <Clock className="w-4 h-4" />
            <span>Last updated: {new Date().toLocaleString()}</span>
          </div>
        </div>
      </div>

      {/* Search and Filters */}
      <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
        <div className="flex flex-col xl:flex-row space-y-4 xl:space-y-0 xl:space-x-4">
          <div className="relative flex-1">
            <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
            <input
              type="text"
              placeholder="Search by question, answer, or category..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-12 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
            />
          </div>
          <div className="flex flex-wrap items-center gap-3">
            <div className="flex items-center space-x-2">
              <Filter className="w-5 h-5 text-gray-400" />
              <select
                value={feedbackFilter}
                onChange={(e) => setFeedbackFilter(e.target.value as any)}
                className="border border-gray-300 rounded-lg px-4 py-3 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-white"
              >
                <option value="all">All Feedbacks</option>
                <option value="chat">Thumbs Up</option>
                <option value="auto">Thumbs Down</option>
              </select>
            </div>
          </div>
        </div>
      </div>

      {/* Training Data Table */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50 border-b border-gray-200">
              <tr>
                <th className="text-left py-4 px-6 font-semibold text-gray-900">Question</th>
                <th className="text-left py-4 px-6 font-semibold text-gray-900">Answer</th>
                <th className="text-left py-4 px-6 font-semibold text-gray-900">Feedback</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-100">
              {filteredData.length === 0 ? (
                <tr>
                  <td colSpan={3} className="py-16 text-center text-gray-500">
                    <div className="flex flex-col items-center space-y-3">
                      <Database className="w-16 h-16 text-gray-300" />
                      <p className="text-lg font-medium">No training data found</p>
                      {searchTerm && (
                        <p className="text-sm text-gray-400">Try adjusting your search terms or filters</p>
                      )}
                    </div>
                  </td>
                </tr>
              ) : (
                filteredData.map((item) => (
                  <motion.tr
                    key={item.id}
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="hover:bg-gray-50 transition-colors duration-150"
                  >
                    <td className="py-5 px-6 align-top">
                      <div className="max-w-md">
                        <p className="text-gray-700 truncate">
                          {item.userQuestion.length > 60 
                            ? `${item.userQuestion.substring(0, 60)}...` 
                            : item.userQuestion
                          }
                        </p>
                      </div>
                    </td>
                    <td className="py-5 px-6 align-top">
                      <div className="max-w-md">
                        <p className="text-gray-600 truncate text-sm">
                          {item.assistantAnswer.length > 60 
                            ? `${item.assistantAnswer.substring(0, 60)}...` 
                            : item.assistantAnswer
                          }
                        </p>
                      </div>
                    </td>
                    <td className="py-5 px-6 align-top">
                      <div className="max-w-md">
                        <p className="text-gray-600 truncate text-sm">
                          {item.feedback && item.feedback.length > 0
                            ? (item.feedback.length > 60 ? `${item.feedback.substring(0, 60)}...` : item.feedback)
                            : <span className="text-gray-400 text-xs">No feedback</span>
                          }
                        </p>
                      </div>
                    </td>
                  </motion.tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}; 